generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  password       String
  firstName      String?
  lastName       String?
  address        String?
  image          String?
  emailVerified  DateTime?
  role           UserRole @default(USER)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // relations
  loginAttempts  LoginAttempt[]
  signupAttempts SignupAttempt[]
  emailTokens    EmailVerificationToken[]
  accounts       Account[]
  sessions       Session[]
  Authenticator  Authenticator[]
  invoices       Invoice[]
}

enum UserRole {
  USER
  ADMIN
}

model LoginAttempt {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  ip        String
  success   Boolean
  createdAt DateTime @default(now())
}

model SignupAttempt {
  id        String   @id @default(cuid())
  email     String
  ip        String
  success   Boolean
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model EmailVerificationToken {
  token      String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Invoice {
  id String @id @default(uuid())

  invoiceName   String
  total         Int
  status        InvoiceStatus
  date          DateTime
  dueDate       Int
  fromName      String
  fromEmail     String
  fromAddress   String
  clientName    String
  clientEmail   String
  clientAddress String
  currency      String
  invoiceNumber Int
  note          String?

  invoiceItemDescription String
  invoiceItemQuantity    Int
  invoiceItemRate        Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

enum InvoiceStatus {
  PAID
  PENDING
}
